(*

  Copyright (c) SoftSec Lab. @ KAIST, since 2016

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

 *)

namespace PoE

open B2R2
open System
open System.Text.RegularExpressions

/// This type presents the details about exploit a PoE represents.
type ExploitType =
  /// There is a stack overflow at the func address.
  | StackOverflow of func: Addr
  /// There is a heap overflow at the func address.
  | HeapOverflow of func: Addr
  /// There is a format string vulnerability at the function call address.
  | FormatString of call: Addr
  /// There is a use-after-free at the func address.
  | UseAfterFree of func: Addr
  /// This is just a test case, not an exploit.
  | Unexploitable

module ExploitType =
  let private matchProc pattern constructor str =
    let pattern = pattern + @"\(([a-fA-F0-9]+)\)"
    let stackregex = Regex (pattern, RegexOptions.IgnoreCase)
    let m = stackregex.Match str
    if m.Success then
      let s = m.Groups.[1].ToString ()
      UInt64.Parse (s, Globalization.NumberStyles.HexNumber) |> constructor
    else Error Unexploitable

  let private matchStackOverflow str =
    matchProc "stack" (StackOverflow >> Ok) str

  let private matchHeapOverflow str =
    matchProc "heap" (HeapOverflow >> Ok) str

  let private matchFormatString str =
    matchProc "formatstr" (FormatString >> Ok) str

  let private matchUAF str =
    matchProc "uaf" (UseAfterFree >> Ok) str

  let private (<|>) r1 r2 =
    match r1 with
    | Ok t -> Ok t
    | Error _ ->
      match r2 with
      | Ok t -> Ok t
      | Error e -> Error e

  let ofString str =
    matchStackOverflow str
    <|> matchHeapOverflow str
    <|> matchFormatString str
    <|> matchUAF str
    |> function
      | Ok t -> t
      | Error t -> t

  let toString = function
    | StackOverflow (addr) -> "#exploit stack(" + addr.ToString("X") + ")"
    | HeapOverflow (addr) -> "#exploit heap(" + addr.ToString("X") + ")"
    | FormatString (addr) -> "#exploit formatstr(" + addr.ToString("X") + ")"
    | UseAfterFree (addr) -> "#exploit uaf(" + addr.ToString("X") + ")"
    | Unexploitable -> ""
